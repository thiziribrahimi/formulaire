const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const fetch = require("node-fetch"); // Assure-toi d'avoir node-fetch@2 install√©

const app = express();
const PORT = 4000;

app.use(cors());
app.use(bodyParser.json());

// ‚úÖ AIRTABLE CONFIG POUR LES CODES PROMO - BASE ANCIENNE (FONCTIONNELLE)
const AIRTABLE_BASE_ID_PROMO = "appLAFIAMjHg6ZEuQ"; // ‚úÖ BASE ANCIENNE POUR CODES PROMO
const AIRTABLE_TABLE_NAME = "tblZxqrnc80BmO6Dg"; // ‚úÖ TABLE CODES PROMO
const AIRTABLE_API_KEY = "patzYVfCYwQWH3Mng.7ca9bb3a21a7976826e5a395e4ac4c01649307f3638b8f463e6d774a5de5f598"; // Votre jeton personnel

// ‚úÖ BASE ID POUR LES WEBHOOKS - NOUVELLE BASE (FONCTIONNELLE)
const AIRTABLE_BASE_ID_WEBHOOKS = "appJ34INj8TdrYu22"; // ‚úÖ NOUVELLE BASE POUR WEBHOOKS

// üîç ENDPOINT DE DEBUG : Lister les tables disponibles (CODES PROMO)
app.get("/api/listTables", async (req, res) => {
  try {
    console.log("üîç Test de connexion √† Airtable (CODES PROMO)...");
    console.log("üìã Base ID:", AIRTABLE_BASE_ID_PROMO);
    console.log("üîë API Key (premiers caract√®res):", AIRTABLE_API_KEY.substring(0, 15) + "...");
    
    const response = await fetch(`https://api.airtable.com/v0/meta/bases/${AIRTABLE_BASE_ID_PROMO}/tables`, {
      headers: {
        "Authorization": `Bearer ${AIRTABLE_API_KEY}`,
        "Content-Type": "application/json"
      }
    });

    const data = await response.json();
    console.log("üìä Statut de la r√©ponse:", response.status);
    console.log("üìä R√©ponse compl√®te:", JSON.stringify(data, null, 2));
    
    if (data.tables) {
      console.log("üìã Tables trouv√©es:");
      data.tables.forEach(table => {
        console.log(`  - "${table.name}" (ID: ${table.id})`);
        if (table.fields) {
          console.log(`    Champs disponibles:`);
          table.fields.forEach(field => {
            console.log(`      - "${field.name}" (Type: ${field.type})`);
          });
        }
      });
    }
    
    res.json(data);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des tables:", error);
    res.status(500).json({ error: error.message });
  }
});

// üîç NOUVEAU ENDPOINT : Voir le contenu de la table des codes promo
app.get("/api/debugPromoTable", async (req, res) => {
  try {
    console.log("üîç Debug de la table des codes promo...");
    
    const airtableUrl = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID_PROMO}/${AIRTABLE_TABLE_NAME}`;
    
    const response = await fetch(airtableUrl, {
      headers: {
        "Authorization": `Bearer ${AIRTABLE_API_KEY}`,
        "Content-Type": "application/json"
      }
    });

    const data = await response.json();
    console.log("üìä Statut HTTP de la r√©ponse:", response.status);
    console.log("üìä R√©ponse compl√®te:", JSON.stringify(data, null, 2));
    
    if (data.records && data.records.length > 0) {
      console.log("üìã Premier enregistrement trouv√©:");
      console.log("üìã Champs disponibles:", Object.keys(data.records[0].fields));
      console.log("üìã Donn√©es:", JSON.stringify(data.records[0].fields, null, 2));
    }
    
    res.json(data);
  } catch (error) {
    console.error("‚ùå Erreur lors du debug:", error);
    res.status(500).json({ error: error.message });
  }
});

// üîç ENDPOINT : V√©rifier un code promo (BASE ANCIENNE)
app.post("/api/verifyPromoCode", async (req, res) => {
  const { code } = req.body;
  
  console.log("üöÄ ENDPOINT CODES PROMO APPEL√â !");
  console.log("üì® Body re√ßu:", req.body);
  console.log("üîç Tentative de v√©rification du code:", code);
  console.log("üîç Base utilis√©e pour codes promo:", AIRTABLE_BASE_ID_PROMO);

  if (!code || !code.trim()) {
    console.log("‚ùå Code promo vide ou manquant");
    return res.status(400).json({ 
      error: "Code promo requis",
      valid: false 
    });
  }

  try {
    // üì° Appel √† l'API Airtable pour chercher le code (BASE ANCIENNE)
    const airtableUrl = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID_PROMO}/${AIRTABLE_TABLE_NAME}`;
    const searchCode = code.trim().toUpperCase();
    
    // ‚úÖ TESTER DIFF√âRENTS NOMS DE CHAMPS POSSIBLES AVEC ENCODAGE CORRECT
    const possibleFieldNames = [
      "Nom du code",
      "Nom%20du%20code", 
      "Code", 
      "code", 
      "Code promo", 
      "Nom", 
      "Name"
    ];
    
    let foundData = null;
    let workingFieldName = null;
    
    // Essayer chaque nom de champ possible
    for (const fieldName of possibleFieldNames) {
      // Encodage manuel pour les espaces
      const encodedFieldName = fieldName.includes(' ') ? 
        fieldName.replace(/ /g, '%20') : 
        fieldName;
      
      const filterFormula = `{${fieldName}}="${searchCode}"`;
      const encodedFormula = encodeURIComponent(filterFormula);
      const fullUrl = `${airtableUrl}?filterByFormula=${encodedFormula}`;
      
      console.log(`üîç Tentative avec le champ: "${fieldName}"`);
      console.log("üìã Formule de filtrage:", filterFormula);
      console.log("üìã Formule encod√©e:", encodedFormula);
      console.log("üåê URL compl√®te:", fullUrl);
      
      const response = await fetch(fullUrl, {
        headers: {
          "Authorization": `Bearer ${AIRTABLE_API_KEY}`,
          "Content-Type": "application/json"
        }
      });

      console.log(`üìä Statut HTTP pour "${fieldName}":`, response.status);
      
      const data = await response.json();
      console.log(`üìä R√©ponse pour "${fieldName}":`, JSON.stringify(data, null, 2));
      
      if (response.ok && data.records && data.records.length > 0) {
        console.log(`‚úÖ Code trouv√© avec le champ: "${fieldName}"`);
        foundData = data;
        workingFieldName = fieldName;
        break;
      } else if (!response.ok) {
        console.log(`‚ùå Erreur avec le champ "${fieldName}":`, data.error?.message);
        continue;
      } else {
        console.log(`‚ùå Aucun r√©sultat avec le champ: "${fieldName}"`);
      }
    }

    if (foundData && foundData.records && foundData.records.length > 0) {
      const promoRecord = foundData.records[0].fields;
      
      console.log("‚úÖ Code promo trouv√© dans Airtable!");
      console.log(`‚úÖ Champ qui fonctionne: "${workingFieldName}"`);
      console.log("üìã Donn√©es du record:", JSON.stringify(promoRecord, null, 2));
      
      // üìä Extraire les informations du code promo selon les champs de votre table
      const promoInfo = {
        valid: true,
        code: promoRecord["Nom du code"] || promoRecord["Code"] || promoRecord["code"] || searchCode,
        discountPercentage: promoRecord["Montant √©conomis√©"] || 0,
        description: `Code promo ${promoRecord["Nom du code"] || searchCode} - ${promoRecord["Montant √©conomis√©"] || 0}% de r√©duction`,
        // Ajoutez d'autres champs selon votre structure Airtable
        origin: promoRecord["Origine"] || "",
        clientName: promoRecord["D√©tenteur clients"] || "",
        tutorName: promoRecord["D√©tenteur tuteurs"] || "",
        workingFieldName: workingFieldName // Pour debug
      };

      console.log("‚úÖ Code promo valide retourn√©:", JSON.stringify(promoInfo, null, 2));
      res.status(200).json(promoInfo);
    } else {
      // Code non trouv√© avec aucun des champs
      console.log("‚ùå Code promo non trouv√©:", searchCode);
      console.log("‚ùå Aucun des noms de champs test√©s n'a fonctionn√©");
      res.status(200).json({ 
        valid: false, 
        error: "Code promo invalide ou inexistant",
        debug: `Champs test√©s: ${possibleFieldNames.join(", ")}`
      });
    }

  } catch (error) {
    console.error("‚ùå ERREUR COMPL√àTE lors de la v√©rification du code promo:");
    console.error("‚ùå Message:", error.message);
    console.error("‚ùå Stack:", error.stack);
    res.status(500).json({ 
      valid: false, 
      error: "Erreur lors de la v√©rification du code promo" 
    });
  }
});

// üîÅ Route 1 : Envoi formulaire vers la NOUVELLE BASE - ‚úÖ WEBHOOKS INVERS√âS
app.post("/api/sendToAirtable", async (req, res) => {
  const receivedData = req.body;

  console.log("üì® Donn√©es re√ßues (formulaire demandes):", receivedData);

  // üîÑ TRANSFORMATION DES NOMS DE CHAMPS POUR AIRTABLE
  const payload = {
    "Email": receivedData.email || "",
    "Commentaire": receivedData.comment || "",
    "Code postal": receivedData.postalCode || "",
    "Profil du tuteur": Array.isArray(receivedData.tutorProfile) 
      ? receivedData.tutorProfile.join(", ") 
      : (receivedData.tutorProfile || "")
  };

  console.log("üîÑ Donn√©es transform√©es pour Airtable:", payload);

  // ‚úÖ WEBHOOK INVERS√â - NOUVELLE BASE appJ34INj8TdrYu22
  const webhookUrl = "https://hooks.airtable.com/workflows/v1/genericWebhook/appJ34INj8TdrYu22/wfl3VVnEmHoBLHT0M/wtrFesxsBUA2Yeew8";

  console.log("üöÄ Envoi vers le webhook (demandes - INVERS√â):", webhookUrl);
  console.log("üöÄ Base de destination webhooks:", AIRTABLE_BASE_ID_WEBHOOKS);

  try {
    const response = await fetch(webhookUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    let result;
    try {
      result = await response.json();
    } catch (jsonErr) {
      console.warn("‚ö†Ô∏è Pas de JSON en retour");
      result = { success: true };
    }

    if (!response.ok) {
      throw new Error(result?.error || "Erreur HTTP Airtable");
    }

    console.log("‚úÖ SUCCESS - Formulaire envoy√© vers", AIRTABLE_BASE_ID_WEBHOOKS);
    console.log("‚úÖ R√©ponse:", result);
    
    res.status(200).json({
      message: "‚úÖ Formulaire envoy√© vers la NOUVELLE BASE",
      baseDestination: AIRTABLE_BASE_ID_WEBHOOKS,
      webhook: "wfl3VVnEmHoBLHT0M",
      originalData: receivedData,
      transformedData: payload,
      airtableResponse: result,
    });
  } catch (err) {
    console.error("‚ùå Erreur formulaire:", err);
    res.status(500).json({ error: "√âchec d'envoi formulaire" });
  }
});

// üîÅ Route 2 : Envoi dossier complet vers la NOUVELLE BASE - ‚úÖ WEBHOOKS INVERS√âS
app.post("/api/sendFullDataToAirtable", async (req, res) => {
  const receivedData = req.body;

  console.log("üì® Donn√©es re√ßues (dossier complet):", receivedData);

  // üîÑ TRANSFORMATION AUTOMATIQUE DES NOMS DE CHAMPS POUR AIRTABLE
  // Mapping complet JavaScript ‚Üí Fran√ßais Airtable
  const fieldMapping = {
    // Champs principaux
    "service": "Service",
    "prenom": "Pr√©nom de l'√©l√®ve", 
    "classe": "Classe",
    "besoins": "Besoins",
    "particularites": "Particularit√©s",
    "objectifs": "Objectifs",
    "matieres": "Mati√®res",
    "nombreDeCours": "Nombre de cours / semaine",
    "dureeSeances": "Dur√©e des s√©ances", 
    "disponibilites": "Disponibilit√©s",
    "civilite": "Civilit√©",
    "nomParent": "Nom du parent",
    "telephoneParent": "T√©l√©phone du parent",
    "email": "Email",
    
    // Alternatives possibles
    "prenomEleve": "Pr√©nom de l'√©l√®ve",
    "prenomDeLeleve": "Pr√©nom de l'√©l√®ve",
    "nomDuParent": "Nom du parent",
    "telephoneDuParent": "T√©l√©phone du parent",
    "emailParent": "Email",
    "nombreDeCoursParSemaine": "Nombre de cours / semaine",
    "dur–µ–µDesSeances": "Dur√©e des s√©ances"
  };

  // Transformation syst√©matique
  const payload = {};
  
  // D'abord, copier les champs qui sont d√©j√† au bon format (fran√ßais)
  Object.keys(receivedData).forEach(key => {
    if (key.includes('√©') || key.includes('√®') || key.includes('√†') || key.includes(' ')) {
      // C'est probablement d√©j√† un nom fran√ßais
      payload[key] = receivedData[key];
    }
  });
  
  // Ensuite, transformer les champs JavaScript
  Object.keys(receivedData).forEach(key => {
    if (fieldMapping[key]) {
      payload[fieldMapping[key]] = receivedData[key];
      console.log(`üîÑ Transform√©: ${key} ‚Üí ${fieldMapping[key]} = "${receivedData[key]}"`);
    } else if (!payload[key]) {
      // Si pas de mapping et pas d√©j√† ajout√©, garder tel quel
      payload[key] = receivedData[key];
    }
  });

  console.log("üîÑ Donn√©es transform√©es pour Airtable:", payload);
  console.log("üì§ Payload final envoy√©:", payload);

  // ‚úÖ WEBHOOK INVERS√â - NOUVELLE BASE appJ34INj8TdrYu22
  const fullWebhookUrl = "https://hooks.airtable.com/workflows/v1/genericWebhook/appJ34INj8TdrYu22/wflMhRDjXdZdcMx3B/wtroAoN7cqbEpjSzX";

  console.log("üöÄ Envoi vers le webhook (dossier complet - INVERS√â):", fullWebhookUrl);
  console.log("üöÄ Base de destination webhooks:", AIRTABLE_BASE_ID_WEBHOOKS);

  try {
    const response = await fetch(fullWebhookUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    let result;
    try {
      result = await response.json();
    } catch (jsonErr) {
      console.warn("‚ö†Ô∏è Pas de JSON en retour");
      result = { success: true };
    }

    if (!response.ok) {
      throw new Error(result?.error || "Erreur HTTP Airtable");
    }

    console.log("‚úÖ SUCCESS - Dossier complet envoy√© vers", AIRTABLE_BASE_ID_WEBHOOKS);
    console.log("‚úÖ R√©ponse:", result);
    
    res.status(200).json({
      message: "‚úÖ Dossier complet envoy√© vers la NOUVELLE BASE",
      baseDestination: AIRTABLE_BASE_ID_WEBHOOKS,
      webhook: "wflMhRDjXdZdcMx3B",
      originalData: receivedData,
      transformedData: payload,
      airtableResponse: result,
    });
  } catch (err) {
    console.error("‚ùå Erreur dossier complet:", err);
    res.status(500).json({ error: "√âchec d'envoi dossier complet" });
  }
});

// üöÄ Lancement du serveur
app.listen(PORT, () => {
  console.log(`‚úÖ Serveur d√©marr√© sur http://localhost:${PORT}`);
  console.log("");
  console.log("üìã CONFIGURATION MULTI-BASES:");
  console.log(`   üîç Codes promo: ${AIRTABLE_BASE_ID_PROMO} (base ancienne)`);
  console.log(`   üì§ Webhooks: ${AIRTABLE_BASE_ID_WEBHOOKS} (base nouvelle)`);
  console.log("");
  console.log("üéØ ENDPOINTS DISPONIBLES:");
  console.log("   üìã CODES PROMO:");
  console.log(`     - POST /api/verifyPromoCode ‚Üí V√©rifier code promo`);
  console.log(`     - GET  /api/listTables ‚Üí Debug tables`);
  console.log(`     - GET  /api/debugPromoTable ‚Üí Debug codes promo`);
  console.log("   üì§ WEBHOOKS (avec transformation des champs):");
  console.log(`     - POST /api/sendToAirtable ‚Üí Formulaire demandes`);
  console.log(`     - POST /api/sendFullDataToAirtable ‚Üí Dossier complet`);
  console.log("");
  console.log("üîÑ TRANSFORMATION DES CHAMPS ACTIV√âE:");
  console.log("   - email ‚Üí Email");
  console.log("   - comment ‚Üí Commentaire");
  console.log("   - postalCode ‚Üí Code postal");
  console.log("   - tutorProfile ‚Üí Profil du tuteur");
  console.log("   - prenom ‚Üí Pr√©nom de l'√©l√®ve (etc.)");
  console.log("");
  console.log("üö® SERVEUR COMPLET ET FONCTIONNEL !");
  console.log("‚úÖ Codes promo: BASE ANCIENNE (appLAFIAMjHg6ZEuQ)");
  console.log("‚úÖ Webhooks: BASE NOUVELLE (appJ34INj8TdrYu22)");
});